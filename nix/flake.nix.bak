{
  description = "Example nix-darwin system flake";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    nix-darwin.url = "github:nix-darwin/nix-darwin/master";
    nix-darwin.inputs.nixpkgs.follows = "nixpkgs";
    # devenv.url = "github:cachix/devenv/latest";

    # homebrew management
    nix-homebrew.url = "github:zhaofengli/nix-homebrew";
    # Optional: Declarative tap management
    homebrew-core = { url = "github:homebrew/homebrew-core"; flake = false; };
    homebrew-cask = { url = "github:homebrew/homebrew-cask"; flake = false; };

  };

  outputs = inputs@{ self, nix-darwin, nixpkgs, nix-homebrew, homebrew-core, homebrew-cask }:
  let
    configuration = { pkgs, ... }: {
      # disable nix-darwin's nix in order to manage nix with determinate nix
      nix.enable = false;

      # List packages installed in system profile. To search by name, run:
      # $ nix-env -qaP | grep wget
      environment.systemPackages = with pkgs; [
        neovim
        tmux
        fish
      ];

      system.primaryUser = "archean";

      homebrew = {
        enable = true;
        onActivation = {
          # cleanup = "zap";
          autoUpdate = true;
          upgrade = true;
        };
        global.autoUpdate = true;

        brews = [
          # "bitwarden-cli"
        ];
        taps = [
          #"FelixKratz/formulae" #sketchybar
        ];
        casks = [
          "iina"
          "raycast"
        ];
        masApps = {
          # "Pages" = 409201541;
        };
      };
      
      fonts.packages = with pkgs; [
        # Maple Mono (Ligature TTF unhinted)
        maple-mono.truetype
        # Maple Mono NF (Ligature unhinted)
        maple-mono.NF-unhinted
        # Maple Mono NF CN (Ligature unhinted)
        maple-mono.NF-CN-unhinted
      ];

      # Keyboard
      system.keyboard.enableKeyMapping = true;
      system.keyboard.remapCapsLockToEscape = false;

      # Add ability to used TouchID for sudo authentication
      security.pam.services.sudo_local.touchIdAuth = true;

      # # macOS configuration
      # system.activationScripts.postUserActivation.text = ''
      #   # Following line should allow us to avoid a logout/login cycle
      #   /System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u
      # '';
      # system.defaults = {
      #   NSGlobalDomain.AppleShowAllExtensions = true;
      #   NSGlobalDomain.AppleShowScrollBars = "Always";
      #   NSGlobalDomain.NSUseAnimatedFocusRing = false;
      #   NSGlobalDomain.NSNavPanelExpandedStateForSaveMode = true;
      #   NSGlobalDomain.NSNavPanelExpandedStateForSaveMode2 = true;
      #   NSGlobalDomain.PMPrintingExpandedStateForPrint = true;
      #   NSGlobalDomain.PMPrintingExpandedStateForPrint2 = true;
      #   NSGlobalDomain.NSDocumentSaveNewDocumentsToCloud = false;
      #   NSGlobalDomain.ApplePressAndHoldEnabled = false;
      #   NSGlobalDomain.InitialKeyRepeat = 25;
      #   NSGlobalDomain.KeyRepeat = 2;
      #   NSGlobalDomain."com.apple.mouse.tapBehavior" = 1;
      #   NSGlobalDomain.NSWindowShouldDragOnGesture = true;
      #   NSGlobalDomain.NSAutomaticSpellingCorrectionEnabled = false;
      #   LaunchServices.LSQuarantine = false; # disables "Are you sure?" for new apps
      #   loginwindow.GuestEnabled = false;
      #   finder.FXPreferredViewStyle = "Nlsv";
      # };

      # system.defaults.CustomUserPreferences = {
      #     "com.apple.finder" = {
      #       ShowExternalHardDrivesOnDesktop = true;
      #       ShowHardDrivesOnDesktop = false;
      #       ShowMountedServersOnDesktop = false;
      #       ShowRemovableMediaOnDesktop = true;
      #       _FXSortFoldersFirst = true;
      #       # When performing a search, search the current folder by default
      #       FXDefaultSearchScope = "SCcf";
      #       DisableAllAnimations = true;
      #       NewWindowTarget = "PfDe";
      #       NewWindowTargetPath = "file://$\{HOME\}/Desktop/";
      #       AppleShowAllExtensions = true;
      #       FXEnableExtensionChangeWarning = false;
      #       ShowStatusBar = true;
      #       ShowPathbar = true;
      #       WarnOnEmptyTrash = false;
      #     };
      #     "com.apple.desktopservices" = {
      #       # Avoid creating .DS_Store files on network or USB volumes
      #       DSDontWriteNetworkStores = true;
      #       DSDontWriteUSBStores = true;
      #     };
      #     "com.apple.dock" = {
      #       autohide = false;
      #       launchanim = false;
      #       static-only = false;
      #       show-recents = false;
      #       show-process-indicators = true;
      #       orientation = "left";
      #       tilesize = 36;
      #       minimize-to-application = true;
      #       mineffect = "scale";
      #       enable-window-tool = false;
      #     };
      #     "com.apple.ActivityMonitor" = {
      #       OpenMainWindow = true;
      #       IconType = 5;
      #       SortColumn = "CPUUsage";
      #       SortDirection = 0;
      #     };
      #     "com.apple.Safari" = {
      #       # Privacy: donâ€™t send search queries to Apple
      #       UniversalSearchEnabled = false;
      #       SuppressSearchSuggestions = true;
      #     };
      #     "com.apple.AdLib" = {
      #       allowApplePersonalizedAdvertising = false;
      #     };
      #     "com.apple.SoftwareUpdate" = {
      #       AutomaticCheckEnabled = true;
      #       # Check for software updates daily, not just once per week
      #       ScheduleFrequency = 1;
      #       # Download newly available updates in background
      #       AutomaticDownload = 1;
      #       # Install System data files & security updates
      #       CriticalUpdateInstall = 1;
      #     };
      #     "com.apple.TimeMachine".DoNotOfferNewDisksForBackup = true;
      #     # Prevent Photos from opening automatically when devices are plugged in
      #     "com.apple.ImageCapture".disableHotPlug = true;
      #     # Turn on app auto-update
      #     "com.apple.commerce".AutoUpdate = true;
      #     "com.googlecode.iterm2".PromptOnQuit = false;
      #     "com.google.Chrome" = {
      #       AppleEnableSwipeNavigateWithScrolls = true;
      #       DisablePrintPreview = true;
      #       PMPrintingExpandedStateForPrint2 = true;
      #     };
      # };


      # Necessary for using flakes on this system.
      nix.settings.experimental-features = "nix-command flakes";

      # Enable alternative shell support in nix-darwin.
      # programs.fish.enable = true;

      # Set Git commit hash for darwin-version.
      system.configurationRevision = self.rev or self.dirtyRev or null;

      # Used for backwards compatibility, please read the changelog before changing.
      # $ darwin-rebuild changelog
      system.stateVersion = 6;

      # The platform the configuration will be used on.
      nixpkgs.hostPlatform = "aarch64-darwin";
    };
  in
  {
    # Build darwin flake using:
    # $ darwin-rebuild build --flake .#simple
    darwinConfigurations."mac" = nix-darwin.lib.darwinSystem {
      modules = [
        configuration
        nix-homebrew.darwinModules.nix-homebrew
        {
          nix-homebrew = {
            # Install Homebrew under the default prefix
            enable = true;

            # Apple Silicon Only: Also install Homebrew under the default Intel prefix for Rosetta 2
            # enableRosetta = true;

            # User owning the Homebrew prefix
            user = "archean";

            # Optional: Declarative tap management
            taps = {
              "homebrew/homebrew-core" = homebrew-core;
              "homebrew/homebrew-cask" = homebrew-cask;
            };

            # Optional: Enable fully-declarative tap management
            #
            # With mutableTaps disabled, taps can no longer be added imperatively with `brew tap`.
            mutableTaps = false;
          };
        }
      ];
    };
  };
}
